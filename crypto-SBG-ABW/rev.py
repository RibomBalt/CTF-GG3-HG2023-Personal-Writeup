from Crypto.Util.number import getPrime, bytes_to_long, isPrime, long_to_bytes, GCD
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import hashlib
from random import randint

import gmpy2
from gmpy2 import mpz

def factors(n):
    result = set()
    n = mpz(n)
    for i in range(1, gmpy2.isqrt(n) + 1):
        div, mod = divmod(n, i)
        if not mod:
            result |= {mpz(i), div}
    return result


m = bytes_to_long(b'we give you this as a gift!')
e = 11
ct1 = 196150896308015382573408099004515975466540094705348761587854272630906023749083911008835478259767648401709605726136589590310666858430120235218762651641330953170392784645631801449432061363776229651965539255255795373230255852992805188205639228954217034390731460194284731845705855212209524525682241998203303747513174581513168217999505436596818091279091144718119512522929858750349220346765422769476003604849600128605208123474607256344535541843454810706150705449483256361736428064150792476736751093915251743882647862500622465233906844054109281842278362125589335774364236155483783338907105809549449368926475631824722919958889450225026843225780470131268709445293157749
ct2 = 83507921327913521142443934492559420944369023782917085618978768157512494136296269338031471193927727958060037960270530278173852027186606624474398269053920321522448607751539858355179998108075848593814112217098612017462222420001262248144471923306139580601814218471659969728514600258330312623506466116333593434744460773476488134792248490905628242447603788884700795677619881924772996081377617066055448888668800826281711315468059146518373888252421991592124071284411947405472003802863596010724784730366575751160333120162778945930063499020829492960600318519615351417595308518636794008603089224459556289944808655338805251676963828327517925911000528943113536807796285824
enc_flag = bytes.fromhex('ac2289b707b174c541cf0952bf3b2057561b0872451444a5bbecf18c007ea20fa2b7c8a1707a74a1657e5adb5c1a417f')

nn1 = m ** e - ct1
nn2 = m ** e - ct2
ngcd = GCD(nn1, nn2)

assert isPrime(ngcd)
p = ngcd
nq1 = nn1 // p
nq2 = nn2 // p
# print(p)

assert nq1 % 2**2 * 179424691 == 0
nq1 //= 2**2 * 179424691
# print(nq1)



# factordb
test_q = 1994841907166253555595565977017478085887329084880725018747951325992115875705370218202322214630728223048172383718977090965296009531272776521845483566167033031269338016789693088543541790629051269003822184012599810842070807948798980555276831576563670836568984652871999874061392371091033327265557380785506760057331398908817521964436164725366935857973626563

assert nq1 % test_q == 0

# print(p - 1)

print(nq1)

# x = 7715641789
# for i in range(20000000):
#     while test_q % x == 0:
#         test_q //= x
#         print(x)
#     x = gmpy2.next_prime(x)
# print(test_q, x)

# print(isPrime(test_q))

# print(ct1.bit_length(), test_q.bit_length(), p.bit_length())

# qmin = gmpy2.next_prime(ct1 // p)
# rmd = test_q % (p * qmin)
# print(2**1097 - qmin)


# kmax = test_q // (ct1 // p)
# x2 = 1
# c = 7
# while 1:
#     x1 = randint(1, test_q)
#     x2 = pow(x2,2,test_q)+c%test_q
    
#     fac = gmpy2.gcd(abs(x1-x2),test_q)
    
#     if fac>1 and gmpy2.is_prime(fac):
#         print( fac)
#         break